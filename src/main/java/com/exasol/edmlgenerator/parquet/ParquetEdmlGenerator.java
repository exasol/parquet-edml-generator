package com.exasol.edmlgenerator.parquet;

import static com.exasol.edmlgenerator.parquet.ToUpperSnakeCaseConverter.toUpperSnakeCase;

import java.io.IOException;
import java.nio.file.Path;

import org.apache.parquet.hadoop.ParquetFileReader;
import org.apache.parquet.schema.MessageType;

import com.exasol.adapter.document.documentfetcher.files.parquet.SeekableInputStreamAdapter;
import com.exasol.adapter.document.documentfetcher.files.randomaccessinputstream.FileRandomAccessInputStream;
import com.exasol.adapter.document.edml.EdmlDefinition;
import com.exasol.errorreporting.ExaError;

/**
 * This class generates EDML mapping definitions for parquet files.
 */
public class ParquetEdmlGenerator {
    private static final String EDML_SCHEMA = "https://schemas.exasol.com/edml-1.2.1.json";

    /**
     * Generate an EDML mapping definition for a parquet file.
     * 
     * @param parquetFile parquet file to generate mapping for
     * @return generated mapping definition
     */
    public EdmlDefinition generateEdmlDefinition(final Path parquetFile) {
        final MessageType schema = getSchema(parquetFile);
        final String fileName = parquetFile.toFile().getName();
        return EdmlDefinition.builder()//
                .schema(EDML_SCHEMA)//
                .source(fileName)//
                .destinationTable(buildDestinationName(fileName))//
                .description("This mapping definition was auto-generated by the parquet-edml-generator.")
                .mapping(new ParquetColumnToMappingDefinitionConverter().convert(schema))//
                .build();
    }

    private String buildDestinationName(final String fileName) {
        final int indexOfLastDot = fileName.lastIndexOf(".");
        final String filenameWithoutExtension = fileName.substring(0,
                indexOfLastDot != -1 ? indexOfLastDot : fileName.length());
        return toUpperSnakeCase(filenameWithoutExtension);
    }

    private MessageType getSchema(final Path parquetFile) {
        try (final FileRandomAccessInputStream inputStream = new FileRandomAccessInputStream(parquetFile.toFile());
                final var reader = ParquetFileReader.open(SeekableInputStreamAdapter.convert(inputStream))) {
            return reader.getFileMetaData().getSchema();
        } catch (final IOException exception) {
            throw new IllegalStateException(ExaError.messageBuilder("E-PEG-1")
                    .message("Failed to read parquet file {{file}}.", parquetFile).toString(), exception);
        }
    }
}
